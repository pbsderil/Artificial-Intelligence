(defun Apply-Movelist (puzzle movelist)
  (setq newlist (list (car movelist)))
  (setq movelist (cddr movelist))
  (while movelist
    (setq newlist (append (list (car movelist)) newlist))
    (setq movelist (cddr movelist)))
  (print puzzle)
  (while newlist
    (print (car newlist))
    (print (setq puzzle (Make-Move puzzle (car newlist))))
    (setq newlist (cdr newlist)))
  puzzle
  )

(defun 8-Puzzle-Test-Driver-BFS ()
  (print "Give the puzzle in a list")
  (setq gpuzzle (read))
  (print "Give the maximum tree depth")
  (setq count (read))
  (setq *GMoveCount* 0)
  (setq z (Find-Blank gpuzzle 0))
  (cond ((= z 0)
	 (setq stack (append (Expand gpuzzle 'right 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 1)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'right 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 2)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 3)
	 (setq stack (append (Expand gpuzzle 'up 'nil)
			     (Expand gpuzzle 'right 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 4)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'up 'nil)
			     (Expand gpuzzle 'right 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 5)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'up 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 6)
	 (setq stack (append (Expand gpuzzle 'up 'nil)
			     (Expand gpuzzle 'right 'nil))))
	((= z 7)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'up 'nil)
			     (Expand gpuzzle 'right 'nil))))
	((= z 8)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'up 'nil)))))
  (setq success nil)
  (print *GMoveCount*)
  (while (and stack (not success) (> count 0))
    (setq lpuzzle (car stack))
    (setq movehistory (cadr stack))
    (setq moves (cadr (cdr stack)))
    (setq newstack (Expand lpuzzle (car moves) movehistory))
    (setq moves (cdr moves))
    (setq count (- count 1))
    (setq success (Is-Equal lpuzzle '(1 2 3 4 5 6 7 8 0)))
    (if (not success)
	(if (setq success (Is-Equal (car newstack) '(1 2 3 4 5 6 7 8 0)))
	 (setq lpuzzle (car newstack))))
    (while (and stack (not success))
      (while (and moves (not success))
	(setq newstack (append (Expand lpuzzle (car moves) movehistory) newstack))
	(setq success (Is-Equal (car newstack) '(1 2 3 4 5 6 7 8 0)))
	(setq moves (cdr moves)))
      (if success
	  (setq movehistory (cadr newstack))
	  (and (setq stack (cdr (cddr stack)))
	       (setq lpuzzle (car stack))
	       (if (Is-Equal lpuzzle '(1 2 3 4 5 6 7 8 0)) (setq success t) t)
	       (setq movehistory (cadr stack))
	       (setq moves (cadr (cdr stack))))))
    (if success (and (print movehistory)
		     (Apply-Movelist gpuzzle movehistory))
      (setq stack newstack))
    (print *GMoveCount*))
  )

(defun 8-Puzzle-Test-Driver-DFS ()
  ;(setq bufname (get-buffer "*scratch*"))
  (print "Give the puzzle in a list")
  (setq gpuzzle (read))
  (print "Give the maximum tree depth")
  (setq count (read))
  (setq *GMoveCount* 0)
  (setq z (Find-Blank gpuzzle 0))
  (cond ((= z 0)
	 (setq stack (append (Expand gpuzzle 'right 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 1)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'right 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 2)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 3)
	 (setq stack (append (Expand gpuzzle 'up 'nil)
			     (Expand gpuzzle 'right 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 4)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'up 'nil)
			     (Expand gpuzzle 'right 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 5)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'up 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 6)
	 (setq stack (append (Expand gpuzzle 'up 'nil)
			     (Expand gpuzzle 'right 'nil))))
	((= z 7)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'up 'nil)
			     (Expand gpuzzle 'right 'nil))))
	((= z 8)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'up 'nil)))))
  (setq success nil)
  (while (and stack (not success))
    (while (and stack (not success) (> count 0))
      (setq count (- count 1))
      (setq lpuzzle (car stack))
      (setq movehistory (cadr stack))
      (setq moves (cadr (cdr stack)))
      (setq move (car moves))
      (if (not (setq moves (cdr moves))) (setq moves '(done)))
      (setq success (Is-Equal lpuzzle '(1 2 3 4 5 6 7 8 0)))
      (if success
	  (and (print movehistory)
	       (print *GMoveCount*)
	       (Apply-Movelist gpuzzle movehistory))
	  (setq stack (append (Expand lpuzzle move movehistory)
			      (list lpuzzle movehistory moves)
			      (cdr (cddr stack ))))))
    (setq stack (cdr (cddr stack)))
    (setq done 'nil)
    (while (and stack (not done))
      (setq count (+ count 1))
      (setq moves (cadr (cdr stack)))
      (if (eq (car moves) 'done) (setq stack (cdr (cddr stack)))
	(setq done 't))))
  (if (not (or stack success)) (print "Failed. Try more depth"))
  )

(defun 8-Puzzle-Test-Driver-IDS ()
  ;(setq bufname (get-buffer "*scratch*"))
  (print "Give the puzzle in a list")
  (setq gpuzzle (read))
  (print "Give the initial tree depth")
  (setq depth (read))
  (setq *GMoveCount* 0)
  (setq z (Find-Blank gpuzzle 0))
  (cond ((= z 0)
	 (setq stack (append (Expand gpuzzle 'right 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 1)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'right 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 2)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 3)
	 (setq stack (append (Expand gpuzzle 'up 'nil)
			     (Expand gpuzzle 'right 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 4)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'up 'nil)
			     (Expand gpuzzle 'right 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 5)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'up 'nil)
			     (Expand gpuzzle 'down 'nil))))
	((= z 6)
	 (setq stack (append (Expand gpuzzle 'up 'nil)
			     (Expand gpuzzle 'right 'nil))))
	((= z 7)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'up 'nil)
			     (Expand gpuzzle 'right 'nil))))
	((= z 8)
	 (setq stack (append (Expand gpuzzle 'left 'nil)
			     (Expand gpuzzle 'up 'nil)))))
  (setq oldstack stack) 	; set to nil if do not want to repeat.
  ; but then, use the setq oldstack commented out line below there.
  (setq success nil)
  (setq failure nil)
  (setq count depth)
  (while (not (or success failure))
    (while (and stack (not success))
      (while (and stack (not success) (> count 0))
	(setq count (- count 1))
	(setq lpuzzle (car stack))
	(setq movehistory (cadr stack))
	(setq moves (cadr (cdr stack)))
	(setq move (car moves))
	(if (not (setq moves (cdr moves))) (setq moves '(done)))
	(setq success (Is-Equal lpuzzle '(1 2 3 4 5 6 7 8 0)))
	(if success
	    (and (print movehistory)
		 (print *GMoveCount*)
		 (Apply-Movelist gpuzzle movehistory))
	  (setq stack (append (Expand lpuzzle move movehistory)
			      (list lpuzzle movehistory moves)
			      (cdr (cddr stack ))))))
      ;(setq oldstack
	;    (append oldstack
	;	     (list (car stack) (cadr stack) (cadr (cdr stack)))))
      (setq stack (cdr (cddr stack)))
      (setq done 'nil)
      (while (and stack (not done))
	(setq count (+ count 1))
	(setq moves (cadr (cdr stack)))
	(if (eq (car moves) 'done) (setq stack (cdr (cddr stack)))
	  (setq done 't))))
    (if (not (or stack success))
	(and (print depth)
	     (print "Failed. Trying more depth")
	     (setq stack oldstack)
	     (setq depth (+ depth 1))
	     (setq count depth))))
  )

(defun 8-Puzzle-Test-Driver-A-Star (Heuristic-Func)
  ;(setq bufname (get-buffer "AStarOutput"))
  (print "Give the puzzle in a list")
  (setq gpuzzle (read))
  (print "Give the initial tree depth")
  (setq depth (read))
  (setq *GMoveCount* 0)
  (setq z (Find-Blank gpuzzle 0))
  (cond ((= z 0)
	 (setq stack (list (Expand gpuzzle 'right 'nil)
			   (Expand gpuzzle 'down 'nil))))
	((= z 1)
	 (setq stack (list (Expand gpuzzle 'left 'nil)
			   (Expand gpuzzle 'right 'nil)
			   (Expand gpuzzle 'down 'nil))))
	((= z 2)
	 (setq stack (list (Expand gpuzzle 'left 'nil)
			   (Expand gpuzzle 'down 'nil))))
	((= z 3)
	 (setq stack (list (Expand gpuzzle 'up 'nil)
			   (Expand gpuzzle 'right 'nil)
			   (Expand gpuzzle 'down 'nil))))
	((= z 4)
	 (setq stack (list (Expand gpuzzle 'left 'nil)
			   (Expand gpuzzle 'up 'nil)
			   (Expand gpuzzle 'right 'nil)
			   (Expand gpuzzle 'down 'nil))))
	((= z 5)
	 (setq stack (list (Expand gpuzzle 'left 'nil)
			   (Expand gpuzzle 'up 'nil)
			   (Expand gpuzzle 'down 'nil))))
	((= z 6)
	 (setq stack (list (Expand gpuzzle 'up 'nil)
			   (Expand gpuzzle 'right 'nil))))
	((= z 7)
	 (setq stack (list (Expand gpuzzle 'left 'nil)
			   (Expand gpuzzle 'up 'nil)
			   (Expand gpuzzle 'right 'nil))))
	((= z 8)
	 (setq stack (list (Expand gpuzzle 'left 'nil)
			   (Expand gpuzzle 'up 'nil)))))
  (setq oldstack 'nil)
  (while stack
    (setq onenode (car stack))
    (setq lpuzzle (car onenode))
    (setq fn (+ (funcall Heuristic-Func lpuzzle) 1))
    (setq onenode (append onenode (list 1)))
    (setq oldstack (append oldstack (list onenode)))
    (setq stack (cdr stack)))

  (setq success nil)
  (print *GMoveCount*)
  (setq count depth)
  (setq iteration 0)
  (setq stack oldstack)
  (while (not success)
    (setq count (+ depth iteration))
    (setq iteration (+ iteration 1))
    (print (list 'Iteration iteration))
    (print (list 'stack 'length (length stack)))
    (print (list 'moves 'made (/ (length (cadr (car stack))) 2)))
    (while (and stack (not success) (> count 0))
      (setq count (- count 1))
      (setq stack (sort stack (lambda (a b) (< (nth 3 a) (nth 3 b)))))
      (setq newnode (car stack))
      (if (= count 1) (print (car newnode)))
      (setq lpuzzle (car newnode))
      (setq movehistory (cadr newnode))
      (setq moves (nth 2 newnode))
      (setq stack (cdr stack))
      (setq success (Is-Equal lpuzzle '(1 2 3 4 5 6 7 8 0)))
      (while (and moves (not success))
	(setq newnode (Expand lpuzzle (car moves) movehistory))
	(setq newnode (append newnode
			      (list (+ (funcall Heuristic-Func (car newnode))
				       (/ (length movehistory) 2)))))
	(setq stack (append (list newnode) stack))
	(setq moves (cdr moves)))
      (if success
	  (and (print movehistory)
	       (Apply-Movelist gpuzzle movehistory))))
    )
  )

(defun 8-Puzzle-Test-Driver-A-Star-GraceDegrade (Heuristic-Func)
  ;(setq bufname (get-buffer "AStarOutput"))
  (print "Give the puzzle in a list")
  (setq gpuzzle (read))
  (print "Give the initial tree depth")
  (setq depth (read))
  (setq *GMoveCount* 0)
  (setq z (Find-Blank gpuzzle 0))
  (cond ((= z 0)
	 (setq stack (list (Expand gpuzzle 'right 'nil)
			   (Expand gpuzzle 'down 'nil))))
	((= z 1)
	 (setq stack (list (Expand gpuzzle 'left 'nil)
			   (Expand gpuzzle 'right 'nil)
			   (Expand gpuzzle 'down 'nil))))
	((= z 2)
	 (setq stack (list (Expand gpuzzle 'left 'nil)
			   (Expand gpuzzle 'down 'nil))))
	((= z 3)
	 (setq stack (list (Expand gpuzzle 'up 'nil)
			   (Expand gpuzzle 'right 'nil)
			   (Expand gpuzzle 'down 'nil))))
	((= z 4)
	 (setq stack (list (Expand gpuzzle 'left 'nil)
			   (Expand gpuzzle 'up 'nil)
			   (Expand gpuzzle 'right 'nil)
			   (Expand gpuzzle 'down 'nil))))
	((= z 5)
	 (setq stack (list (Expand gpuzzle 'left 'nil)
			   (Expand gpuzzle 'up 'nil)
			   (Expand gpuzzle 'down 'nil))))
	((= z 6)
	 (setq stack (list (Expand gpuzzle 'up 'nil)
			   (Expand gpuzzle 'right 'nil))))
	((= z 7)
	 (setq stack (list (Expand gpuzzle 'left 'nil)
			   (Expand gpuzzle 'up 'nil)
			   (Expand gpuzzle 'right 'nil))))
	((= z 8)
	 (setq stack (list (Expand gpuzzle 'left 'nil)
			   (Expand gpuzzle 'up 'nil)))))
  (setq oldstack 'nil)
  (while stack
    (setq onenode (car stack))
    (setq lpuzzle (car onenode))
    (setq fn (+ (funcall Heuristic-Func lpuzzle) 1))
    (setq onenode (append onenode (list 1)))
    (setq oldstack (append oldstack (list onenode)))
    (setq stack (cdr stack)))

  (setq success nil)
  (print *GMoveCount*)
  (setq count depth)
  (setq iteration 0)
  (setq stack oldstack)
  (while (not success)
    (setq count (+ depth iteration))
    (setq iteration (+ iteration 1))
    (print (list 'Iteration iteration))
    (print (list 'stack 'length (length stack)))
    (if (> (length stack) 10000)
				(setq stack (subseq (sort stack (lambda (a b) (< (nth 3 a) (nth 3 b)))) 0 9999)))
    (print (list 'moves 'made (/ (length (cadr (car stack))) 2)))
    (while (and stack (not success) (> count 0))
      (setq count (- count 1))
      (setq stack (sort stack (lambda (a b) (< (nth 3 a) (nth 3 b)))))
      (setq newnode (car stack))
      (if (= count 1) (print (car newnode)))
      (setq lpuzzle (car newnode))
      (setq movehistory (cadr newnode))
      (setq moves (nth 2 newnode))
      (setq stack (cdr stack))
      (setq success (Is-Equal lpuzzle '(1 2 3 4 5 6 7 8 0)))
      (while (and moves (not success))
	(setq newnode (Expand lpuzzle (car moves) movehistory))
	(setq newnode (append newnode
			      (list (+ (funcall Heuristic-Func (car newnode))
				       (/ (length movehistory) 2)))))
	(setq stack (append (list newnode) stack))
	(setq moves (cdr moves)))
      (if success
	  (and (print movehistory)
	       (Apply-Movelist gpuzzle movehistory))))
    )
  )

